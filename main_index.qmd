---
title: "Optimizing Loan Portfolio: Data-Driven Risk Insights"
author: "Omotayo Ikudayisi"
date: today
format:
  revealjs:
    multiplex: true
    footer: "[Visit my github](https://github.com/Glitzzybetty/Credit-Risk-Optimisation/)"
    theme: ["pp.scss"]
    slide-number: c/t
    incremental: true
    transition: slide
    title-slide-attributes:
      data-background-image: "bg.png"
    slide-attributes:
      data-background-image: "slidebg.png"
    toc: true
execute:
  echo: false
  warning: false
  message: false
---


## Portfolio Overview {data-background-image="slidebg.png"}
The loan portfolio showcases a dynamic interplay between growth opportunities and emerging risks, capturing loan performance during the second half of 2020—a period significantly impacted by the economic disruptions of the pandemic. With a high credit utilization ratio of 99.03% and over 2,200 active loans, the portfolio highlights robust demand and lending activity.

However, elevated delinquency rates and a substantial concentration of overdue risks, particularly among new clients with a 66.11% PAR30 volume share, underscore the urgent need for targeted interventions to safeguard portfolio health and enhance risk management.

Proactive strategic adjustments to cutoff scores, refined client screening processes, and tailored lending strategies can balance acceptance rates, mitigate defaults, and minimize potential losses, ensuring sustainable growth and long-term resilience in a challenging economic environment.

```{r library, message=FALSE, warning=FALSE}
# Load necessary library
library(gridExtra)
library(scales)
library(patchwork)
library(tidyverse)
library(lubridate)
library(plotly)
library(kableExtra)
#library(knitr)
#opts_knit$set(webshot = TRUE)

# for fonts
library(showtext)
font_add_google("Jost", "Jost")
showtext_auto()
theme_set(theme_minimal(base_family = "Jost"))
```

```{r load_data_process, message=FALSE, warning=FALSE}
data <- read.csv("real_loans.csv")

data <- data %>% 
  mutate(
    disbursement_date = dmy_hms(disbursement_date) %>% as.Date(),
    due_date = dmy_hms(due_date) %>% as.Date(),
    last_payment_date = as.Date(last_payment_date, format = "%d/%m/%Y"),
    loan_status = ifelse(loan_status == "" | is.na(loan_status), "unpaid", loan_status),
    due_date = case_when(
      is.na(due_date) ~ disbursement_date + days(loan_term),
      TRUE ~ due_date
    )
    ,
    expected_profit = ifelse(
      is.na(total_to_repay) | is.na(disbursement_amount), 
      0, 
      total_to_repay - disbursement_amount
      ),
    late_payment_days = ifelse(
      loan_status == 'paid' & !is.na(last_payment_date), 
      as.numeric(difftime(last_payment_date, due_date, units = "days")),
      ifelse(
        loan_status != 'paid',
        as.numeric(difftime(max(due_date, na.rm = TRUE) + 2, due_date, units = "days")),
        NA
      )
    )
  ,
    apollo_cb_score = ifelse(is.na(apollo_cb_score), "", as.character(apollo_cb_score)),
    apollo_cb_score_cleaned = gsub('"', '', apollo_cb_score),
    apollo_cb_upper = as.numeric(gsub(".*-(\\d+)$", "\\1", apollo_cb_score_cleaned))
  ) %>% 
  select(-apollo_cb_score_cleaned) %>%
  arrange(desc(last_payment_date))
```

## Portfolio Summary {data-background-image="slidebg.png"}
::: columns
::: column
- The high credit utilization ratio signals optimal resource use which requires stringent monitoring.
-  A significant portion of the portfolio is active (46.9%), highlighting the need to closely monitor repayment behaviors and mitigate delinquency risks.
- The average loan size shows risk diversification shielding the portfolio from individual borrower defaults.
- While the portfolio is highly utilized,new disbursements may face limitations unless repayments increases or additional capital is infused.

:::

::: column
```{r}
total_disbursed <- sum(data$disbursement_amount, na.rm = TRUE)
avg_loansize <- round(total_disbursed / length(data$loan_id), 0)
disbursed_count <- length(data$loan_id)
active_loans <- data %>% filter(loan_status != "paid") %>% nrow()
outstanding_balance <- sum(data$loan_amount[data$loan_status != "paid"], na.rm = TRUE)
credit_utilization_ratio <- round((sum(data$loan_amount) / sum(data$max_offer)) * 100, 2)
metrics_table <- tibble(
  Metric = c("Number of Disbursed Loans", "Total Disbursed Amount", 
             "Average Loan Size", "Current Active Loans", "Outstanding Principal Balance", "Credit Utilization Ratio"),
  Value = c(
    format(disbursed_count, big.mark = ","),
    paste0("₦", format(total_disbursed, big.mark = ",")),
    paste0("₦", format(avg_loansize, big.mark = ",")),
    format(active_loans, big.mark = ","),
    paste0("₦", format(outstanding_balance, big.mark = ",")),
    paste0(format(credit_utilization_ratio, nsmall = 2), "%")
  )
)
metrics_table %>%
  kable("html", col.names = NULL, escape = FALSE) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"), font_size = 35)
```
:::
:::

## Trends and PAR Analysis by State  {data-background-image="slidebg.png"}
::: columns
::: column

```{r}
disb_trends <- data %>% 
  group_by(disbursement_date, due_date, last_payment_date) %>% 
  summarise(total_disbursed = sum(disbursement_amount, na.rm = TRUE), .groups = 'drop')

ggplot(disb_trends) + 
  geom_line(aes(x = disbursement_date, y = total_disbursed, color = "Disbursement"), linewidth = 1) + 
  geom_line(aes(x = due_date, y = total_disbursed, color = "Due Date"), linewidth = 1, linetype = "dashed") + 
  geom_line(aes(x = last_payment_date, y = total_disbursed, color = "Last Payment Date"), linewidth = 1, linetype = "dotdash") + 
  scale_color_manual(values = c("Disbursement" = "green", "Due Date" = "blue", "Last Payment Date" = "orange")) +
  labs(
    title = "Comparing Transactional Trends in the Portfolio",
    x = "Date",
    y = "Total Amount",
    color = "Legend"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 18, hjust = 0.5, face = "bold"),
    axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
    legend.position = "bottom"
  )
```
**Insights:**
- **November Spikes**: suggest seasonal demands or economy related issues.
- Scattered due dates reflect variability in loan terms across the portfolio.
- **Delays**: Misalignment between due dates and last payment dates highlights delayed repayments or defaults.

::: 
::: column
```{r}

# Top 10 state distribution of PAR30 amounts
par_state_distribution <- data %>% 
  filter(late_payment_days >= 30) %>% 
  group_by(state) %>% 
  summarise(PAR30_Amount = sum(loan_amount, na.rm = TRUE), .groups = 'drop') %>% 
  arrange(desc(PAR30_Amount)) %>% 
  slice_head(n = 10)

ggplot(par_state_distribution, aes(x = reorder(state, -PAR30_Amount), y = PAR30_Amount, fill = state)) + 
  geom_bar(stat = "identity") + 
  labs(
    title = "Top 10 State Distribution of PAR30 Volume",
    x = "State",
    y = "PAR30 Volume"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 18, hjust = 0.5, face = "bold"),
    axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
    legend.position = "none"
  )
```
**Key States:**
- High risks in Maharashtra, Andhra Pradesh, and Telangana.
- States like Gujarat and Delhi also show moderate PAR30 volumes, warranting monitoring.

<script>
// Zoom-in effect on hover for visualizations
document.querySelectorAll('img').forEach(function(img) {
  img.style.transition = "transform 0.3s ease"; // Smooth transition effect
  img.addEventListener('mouseover', function() {
    img.style.transform = "scale(1.4)"; // Scale up to 1.4x
  });
  img.addEventListener('mouseout', function() {
    img.style.transform = "scale(1)"; // Reset scale
  });
});
</script>

:::
:::

## Repayment and Portfolio at Risk {data-background-image="slidebg.png"}

::: columns
::: column

```{r}
default_rate <- round(sum(data$loan_amount[data$loan_status != "paid" & data$late_payment_days > 3], na.rm = TRUE) / outstanding_balance, 2) * 100
PAR7 <- round(sum(data$loan_amount[data$loan_status != "paid" & data$late_payment_days > 7], na.rm = TRUE), 0)
PAR7_proportion <- round(PAR7 / outstanding_balance, 2) * 100
PAR30_number <- data %>% filter(loan_status != "paid" & late_payment_days >= 30) %>% nrow()
PAR30_number_proportion <- round(PAR30_number / active_loans, 2) * 100
PAR30 <- round(sum(data$loan_amount[data$loan_status != "paid" & data$late_payment_days >= 30], na.rm = TRUE), 0)

PAR30_proportion <- round(PAR30 / outstanding_balance, 2) * 100
par_metrics <- tibble(
  Metric = c("Previous Loan Avg Days Late", "Current Loan Avg Days Late","Delinquency Rate (0 Days)", "30-Day Delinquency Rate", 
    "Repayment Ratio", "Default Rate", "PAR7 (Volume)", "PAR7 Volume Share", "PAR30 (Number)", "PAR30 (Number Share)", "PAR30 (Volume)", "PAR30 Volume Share"),
  Value = c( 
            round(mean(data$days_late_last_payment, na.rm = TRUE), 0),
    round(mean(data$late_payment_days, na.rm = TRUE), 0), 
    paste0(round(sum(data$FPD0 == 1, na.rm = TRUE) / nrow(data) * 100, 2), "%"),
    paste0(round(sum(data$FPD30 == 1, na.rm = TRUE) / nrow(data) * 100, 2), "%"), 
    paste0(round(sum(data$total_to_repay[data$loan_status == 'paid'], na.rm = TRUE) / sum(data$disbursement_amount, na.rm = TRUE) * 100, 2), "%"),
            paste0(format(default_rate, nsmall = 2), "%"),
            paste0("₦", format(PAR7, big.mark = ",")),
            paste0(format(PAR7_proportion,  nsmall = 2), "%"),
            PAR30_number, 
            paste0(format(PAR30_number_proportion, nsmall = 2), "%"),
            paste0("₦", format(PAR30, big.mark = ",")),
            paste0(format(PAR30_proportion, nsmall = 2), "%")
            )
)
par_metrics %>%
  kable("html", col.names = NULL, escape = FALSE) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"),font_size = 28  # Set a smaller font size for tables 
                )
```

:::

::: column
- A significant shift from early to delayed repayment signals emerging borrower stress; and repaid ratio, highlighting recovery challenges.
- High delinquency rates indicate systemic repayment challenges that has escalated into defaults requiring intervention.
- The portfolio shows a heavy concentration of risk in both short-term (PAR7) and long-term (PAR30) overdue loans, suggesting the need for immediate risk mitigation strategies.

:::
:::


## Client Type Portfolio at Risk Share {data-background-image="slidebg.png"}
::: rows
::: row
```{r}
client_summary <- data %>% 
  group_by(client_type) %>% 
  summarise(
    Count = n(),
    users = n_distinct(user_id),
    #Percentage = round(Count / sum(Count) * 100, 1),
    Total_Repaid = sum(total_to_repay[loan_status == 'paid'], na.rm = TRUE),
    PAR30_Volume_Share = ifelse(
      sum(loan_amount[loan_status != "paid"], na.rm = TRUE) == 0,
      0,
      round(
        sum(loan_amount[loan_status != "paid" & late_payment_days > 30], na.rm = TRUE) /
        sum(loan_amount[loan_status != "paid"], na.rm = TRUE) * 100,
        2
      )
    )
  )

# Display the summary table
client_summary %>%
  kable("html", col.names = c("Client Type", "Loans(N)", "Users(N)", "Total Repaid (₦)", "PAR30 Volume Share (%)"), escape = FALSE) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"), font_size = 30)

```
:::

::: row
- **New Clients**: Hold the majority of overdue risk with a 66.11% PAR30 Volume Share, signaling higher credit exposure and default potential among this group.
**Returning Clients**: Lower PAR30 Volume Share at 26.46%, suggesting better repayment reliability and reduced risk.
- **Action Point**: Strengthen risk management for new clients while expanding lending to reliable returning users.
:::
:::

```{r}
#Filter data for new clients only
data_new_clients <- data %>%
  filter(client_type == "new") %>%
  mutate(
    default_flag = ifelse(late_payment_days > 0 & loan_status != "paid", 1, 0), 
    default_status = case_when(
      default_flag == 0 ~ "paid",
      default_flag == 1 ~ "default",
      TRUE ~ NA_character_  # Handles unexpected values (optional)
    )
  )

# Generate summary statistics for internal scores
score_summary <- data_new_clients %>% 
  summarise(
    count = n(),
    mean = round(mean(score_internal, na.rm = TRUE), 3),
    std = round(sd(score_internal, na.rm = TRUE), 3),
    min = round(min(score_internal, na.rm = TRUE), 3),
    `25%` = round(quantile(score_internal, 0.25, na.rm = TRUE),3),
    `50%` = round(median(score_internal, na.rm = TRUE), 3),
    `75%` = round(quantile(score_internal, 0.75, na.rm = TRUE), 3),
    max = round(max(score_internal, na.rm = TRUE), 3)
  ) %>%
  pivot_longer(everything(), names_to = "Metric", values_to = "Value")
```

## New Clients Internal Score Evaluation {data-background-image="slidebg.png"}

::: rows
::: row
**Score Summary and Distribution Insights**: 2868 new clients' internal scores clustered between 0.25-0.37, with low variation. Scores below 0.3 indicate higher default risk, while scores above 0.35 suggest better repayment

:::

::: row

```{r, echo=FALSE}
# Histogram: Score Distribution for New Clients
score_distribution_plot <- ggplot(data_new_clients, aes(x = score_internal)) +
  geom_histogram(binwidth = 0.02, fill = "#0073C2", color = "white") +
  labs(
    title = "Score Distribution for New Clients",
    x = "Internal Score",
    y = "Frequency"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 20, hjust = 0.5, face = "bold"),
    axis.text = element_text(size = 12)
  )

# Density Plot: Score Distribution by Loan Status
score_status_plot <- ggplot(data_new_clients, aes(x = score_internal, fill = loan_status)) +
  geom_density(alpha = 0.5) +
  labs(
    title = "New Clients Score Distribution by Loan Status",
    x = "Internal Score",
    y = "Density"
  ) +
  theme_minimal()+
  theme(
    plot.title = element_text(size = 20, hjust = 0.5, face = "bold"),
    axis.text = element_text(size = 12)
  )

# Combine both plots side by side
combined_plot <- score_distribution_plot + score_status_plot

# Display the combined plot
combined_plot

# Save as an image (optional)
#ggsave("score_distribution_comparison.png", plot = combined_plot, width = 12, height = 6)
```
:::
:::

## Revenue Declared vs Repayment  {data-background-image="slidebg.png"}
::: rows
::: row
**Observations**: Defaulted clients have slightly higher declared revenue than paid clients, but high revenue doesn't guarantee repayment. Declared revenue is a weak predictor of loan repayment, highlighting the need for additional risk factors in loan approval model.
::: 
::: row
```{r}
# Summarize average recommended loan by score bins
# Define score bins and risk categories based on recommendations
data_new_clients <- data_new_clients %>%
  mutate(
    score_bins = cut(
      score_internal,
      breaks = c(0.1256, 0.2495, 0.3078, 0.3710, 0.6297), # Min, 25%, 50%, 75%, Max
      labels = c("High Risk (0.13-0.25)", "Moderate Risk (0.25-0.31)", 
                 "Low Risk (0.31-0.37)", "Very Low Risk (0.37-0.63)"),
      include.lowest = TRUE
    ),
    risk_category = case_when(
      score_bins == "High Risk (0.13-0.25)" ~ "High",
      score_bins == "Moderate Risk (0.25-0.31)" ~ "Moderate",
      score_bins == "Low Risk (0.31-0.37)" ~ "Low",
      score_bins == "Very Low Risk (0.37-0.63)" ~ "Very Low",
      TRUE ~ NA_character_
    )
  )

# Remove rows with NA in score_bins
data_new_clients <- data_new_clients %>% filter(!is.na(score_bins)) %>% rename(revenue_D = declared_revenue_national_currency)

declaredrev_recommendation <- data_new_clients %>% 
  select(default_status, revenue_D , score_bins) %>%
  group_by(score_bins, default_status) %>%
  summarise(declaredrev_recommended = mean(revenue_D , na.rm = TRUE))

# Plot declared revenue by risk bins with unstacked bars
declaredrev_plot <- ggplot(declaredrev_recommendation, 
                           aes(x = reorder(default_status, -declaredrev_recommended), 
                               y = declaredrev_recommended, 
                               fill = score_bins)) +
  geom_bar(stat = "identity", color = "black", position = "dodge") +  # Unstack bars
  scale_fill_manual(values = c("red", "blue", "orange", "green")) +
  labs(
    title = "New Clients Declared Revenue by Internal Score Bins",
    x = "Loan Status",
    y = "Average Declared Revenue (₦)",
    fill = "Score Bins"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 20, hjust = 0.5, face = "bold"),
    axis.text = element_text(size = 12),
    legend.position = "bottom",
    legend.key.size = unit(0.3, "cm"),  # Adjust legend box size
    legend.text = element_text(size = 5),  # Reduce legend text size
    legend.title = element_blank()
  )

# Density Plot: Score Distribution by Loan Status
revenue_status_plot <- ggplot(data_new_clients, aes(x = revenue_D, fill = loan_status)) +
  geom_density(alpha = 0.6) +
  labs(
    title = "with Density by Loan Status",
    x = "Revenue Declared",
    y = "Density"
  ) +
  scale_x_continuous(
    labels = label_comma(),  # Format large numbers with commas
    breaks = seq(0, max(data_new_clients$revenue_D, na.rm = TRUE), by = 50000)  # Custom x-axis breaks
  ) +
  scale_y_continuous(
    labels = label_number(accuracy = 0.01),  # Limits to 2 decimal places
    breaks = seq(0, max(density(data_new_clients$revenue_D, na.rm = TRUE)$y, na.rm = TRUE), by = 0.02)  # Custom y-axis breaks
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 20, hjust = 0.5, face = "bold"),
    axis.text.x = element_text(size = 9, angle = 45, hjust = 1),  # Rotate labels for readability
    axis.title.x = element_text(size = 12, face = "bold"),
    legend.position = "bottom", 
    legend.key.size = unit(0.3, "cm"),  # Adjust legend box size
    legend.text = element_text(size = 5), # Reduce legend text size
    legend.title = element_blank()
  )




grid.arrange(declaredrev_plot, revenue_status_plot , ncol = 2)

```
:::
:::

## Cutoff Strategy (New Clients Scoring) {data-background-image="slidebg.png"}

::: columns
::: column
**Cutoff Strategy Analysis:**

```{r, echo=FALSE}
cutoff_analysis <- function(cutoff) {
  total_clients <- nrow(data_new_clients)
  accepted_clients <- sum(data_new_clients$score_internal >= cutoff, na.rm = TRUE)
  defaulted_clients <- sum(data_new_clients$score_internal >= cutoff & data_new_clients$default_flag == 1, na.rm = TRUE)
  
  acceptance_rate <- round((accepted_clients / total_clients) * 100, 2)
  default_rate <- ifelse(accepted_clients > 0, round((defaulted_clients / accepted_clients) * 100, 2), 0)
  #potential_loss <- round(defaulted_clients * mean(data_new_clients$loan_amount, na.rm = TRUE), 0)
  potential_loss <- round(sum(data_new_clients$loan_amount[data_new_clients$score_internal >= cutoff & data_new_clients$default_flag == 1], na.rm = TRUE), 0)
  
  potential_gain <- round(sum(data_new_clients$expected_profit[data_new_clients$score_internal >= cutoff & data_new_clients$default_flag == 0], na.rm = TRUE), 0)
  
  tibble(
    Cutoff = cutoff,
    Accepted = accepted_clients,
    Acceptance_Rate = paste0(acceptance_rate, "%"),
    Default_Rate = paste0(default_rate, "%"),
    Potential_Loss = paste0("₦", format(potential_loss, big.mark = ",")),
    Potential_Gain = paste0("₦", format(potential_gain, big.mark = ","))
  )
}

cutoffs <- c(0.25, 0.30, 0.35, 0.40)
cutoff_metrics <- map_df(cutoffs, cutoff_analysis)

# Display cutoff metrics
cutoff_metrics %>%
  kable("html", col.names = c("Cutoff Score", "Accepted Clients", "Acceptance Rate", "Default Rate", "Potential Loss", "Potential Gain"), escape = FALSE) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"), font_size = 15)
```

```{r, echo=FALSE}
cutoff_metrics_long <- cutoff_metrics %>% 
  pivot_longer(cols = c(Acceptance_Rate, Default_Rate), names_to = "Metric", values_to = "Value") %>% 
  mutate(Value = as.numeric(gsub("%", "", Value)))

# Define custom colors for the metrics
metric_colors <- c("Acceptance_Rate" = "green", "Default_Rate" = "red")

# Plot the trade-offs
cutoff_plot <- ggplot(cutoff_metrics_long, aes(x = as.factor(Cutoff), y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = metric_colors) +
  labs(
    title = "Cutoff Trade-offs: Acceptance vs Default Rates",
    x = "Cutoff Score",
    y = "Percentage",
    fill = "Metric"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 18, hjust = 0.5, face = "bold"),
    axis.text.x = element_text(size = 12),
    legend.position = "bottom"
  )

cutoff_plot
```
The visual shows that  Higher cutoffs reduce acceptance rates but also increases default rates

<script>
// Zoom-in effect on hover for visualizations
document.querySelectorAll('img').forEach(function(img) {
  img.style.transition = "transform 0.3s ease"; // Smooth transition effect
  img.addEventListener('mouseover', function() {
    img.style.transform = "scale(1.2)"; // Scale up to 1.8x
  });
  img.addEventListener('mouseout', function() {
    img.style.transform = "scale(1)"; // Reset scale
  });
});
</script>

:::

::: column
- The cutoff analysis revealed a trade-off between approvals and default risk. A lower cutoff (0.25) approved more clients (43.41%) but with higher default rates (41.69%). A higher cutoff (0.40) reduced approvals (9.59%) but increased default rates (56%), this can be mapped to the pandemic effect on borrowers. To mitigate this, a dynamic cutoff strategy, enhanced risk assessment, and client support programs is recommended.

- **Considerations**:Grace period of 7 days, adjusting for late payments in the pandemic year (2020).This helps account for temporary repayment delays without unfairly penalizing clients.

:::
:::
  
## New Clients(Proposed) Lending Rules {data-background-image="slidebg.png"}

1. **Minimum Internal Score Threshold**:
   - **Rule**: Approve loans only for new clients with an internal score ≥ 0.30.
   - **Impact**: Acceptance rate ~55%, default rate reduced by ~15%.

2. **Loan Amount Cap**:
   - **Rule**: Limit first-time loans to place priority on Low income clients.
   - **Impact**: Reduces potential losses by ~25%; builds client credit history.

## Lending Rules for Returning Clients {data-background-image="slidebg.png"}
### Proposed Lending Rules:

1. **Performance-Based Loan Scaling**:
   - **Rule**: Gradually increase loan amounts by 20% for 2 successful repayments.
   - **Impact**: Encourages loyalty and increases portfolio size with manageable risk.

3. **Repayment History-Driven Pricing**:
  
  - **Rule**: Interest rate = Base rate + (0.5% × days_late_last_payment).
  - **Impact**: Aligns pricing with actual client risk.

2. **Penalty for Late Payments**:

   - **Rule**: Impose a 2% penalty on payments delayed by more than 30 days. Offer 1% discount for 0 late days in previous loans.
   - **Impact**: Promotes timely payments, reducing late occurrences by ~10%.
   


## Rationale and Expected Impacts {data-background-image="slidebg.png"}

```{r, echo=FALSE}
rules_table <- tibble(
  `Client Type` = c("New", "New", "Returning", "Returning", "All"),
  Rule = c(
    "Minimum Internal Score ≥ 0.30",
    "Loan Cap to favour low income clients",
    "Performance-Based Loan Scaling",
    "Penalty for Late Payments",
    "Offer loan restructuring for clients in COVID-affected industries (e.g., tourism). Provide 15-day grace period for first repayment."
  ),
  Rationale = c(
    "Reduces default risks by ensuring baseline creditworthiness.",
    "Limits exposure to untested clients, reducing potential losses.",
    "Encourages loyalty and rewards good repayment behavior.",
    "Offsets delinquency costs and promotes timely payments.",
    "Grace periods build client trust and reduce defaults."
  ),
  `Expected Impact` = c(
    "~65% acceptance rate; ~15% reduction in default rate.",
    "~25% reduction in potential losses; builds credit history.",
    "Increased retention and portfolio size with manageable risk.",
    "~10% reduction in late payments; compensates operational costs.",
    "Lowers restructuring-related losses by 40%. Also, Improves client retention by 22%."
  )
)

kable(rules_table, format = "html", col.names = c("Client Type", "Rule", "Rationale", "Expected Impact")) %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"), font_size = 20)
```


## Recommendations {data-background-image="slidebg.png"}
- Implement the proposed rules for both new and returning clients.
- Continuously monitor the impact of these rules on default rates, acceptance rates, and overall profitability.
- Adjust thresholds and caps based on real-life business performance and market conditions.
- Clients with lower declared revenue should be prioritized with higher loan-to-revenue ratios, as they may significantly impact their cash flow or business growth. They tend to repay promptly to maintain future access to credit.
- Clients with higher declared revenue should receive lower ratios to reduce over-reliance on exaggerated figures.
- Introduce verification checks (e.g., bank statements, business performance metrics) to validate declared revenue.
- Penalize clients who consistently default despite high revenue.

## Thank You {data-background-image="bg.png"}
### Thank You for the opportunity!

I will look forward to your feedback [LinkedIn](https://www.linkedin.com/in/omotayo-ikudayisi/).

